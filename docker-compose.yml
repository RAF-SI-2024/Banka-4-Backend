# Brief file description
# Copyright (C) 2025  Arsen ArsenoviÄ‡ <aarsenovic8422rn@raf.rs>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


services:
  # User service and its state
  user_service:
    build:
      context: .
      dockerfile: docker/Dockerfile-java
      args:
        SERVICE: user-service
    command:
      - /code/build/libs/user-service-0.0.1-SNAPSHOT.jar
      - --spring.profiles.active=dev,local
    depends_on:
      user_service_db:
        condition: service_healthy
      broker:
        condition: service_started
    volumes:
      - user_service_gradle:/home/service/.gradle
    post_start:
      - command: "chown -R service: /home/service/.gradle"
        user: root
    develop:
      watch:
        - action: sync+restart
          path: ./user-service/src
          target: /code/src
          ignore:
            - main/resources/db/migration
        - action: sync+restart
          path: ./user-service/build.gradle.kts
          target: /code/build.gradle.kts
        - action: sync+restart
          path: ./user-service/settings.gradle.kts
          target: /code/settings.gradle.kts

  user_service_db:
    image: postgres:17
    restart: unless-stopped
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: lmaolmao123
      POSTGRES_DB: user-service
      POSTGRES_USER: user-service
    volumes:
      - user_service_db_data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -d user-service -U user-service"
      interval: 3s
      start_period: 3s
#    ports:
#      - "5432:5432"  # Default port for PostgreSQL
#      - "5433:5432"  # Map container's 5432 to host's 5433


  # Notification service and its state
  notification_service:
    build:
      context: .
      dockerfile: docker/Dockerfile-java
      args:
        SERVICE: notification-service
    command:
      - /code/build/libs/notification-service-0.0.1-SNAPSHOT.jar
      - --spring.profiles.active=dev,local
    depends_on:
      # notification_service_db:
      #   condition: service_healthy
      broker:
        condition: service_started
    volumes:
      - notification_service_gradle:/home/service/.gradle
    post_start:
      - command: "chown -R service: /home/service/.gradle"
        user: root
    develop:
      watch:
        - action: sync+restart
          path: ./notification-service/src
          target: /code/src
          ignore:
            - main/resources/db/migration
        - action: sync+restart
          path: ./notification-service/build.gradle.kts
          target: /code/build.gradle.kts
        - action: sync+restart
          path: ./notification-service/settings.gradle.kts
          target: /code/settings.gradle.kts

  # notification_service_db:
  #   image: postgres:17
  #   restart: unless-stopped
  #   shm_size: 128mb
  #   environment:
  #     POSTGRES_PASSWORD: lmaolmao123
  #     POSTGRES_DB: notification-service
  #     POSTGRES_USER: notification-service
  #   volumes:
  #     - notification_service_db_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: "pg_isready -d notification-service -U notification-service"
  #     interval: 3s
  #     start_period: 3s

  exchange_office:
    build:
      context: .
      dockerfile: docker/Dockerfile-exchange-office
    environment:
      EXCHANGERATE_API_KEY: ${EXCHANGERATE_API_KEY}
    volumes:
      - exchange_office_data:/data


  # Central message broker.  The version below provides the management
  # interface to ease development.  Uses default credentials of guest / guest.
  # Good enough for dev.
  broker:
    image: rabbitmq:4.0-management
    ports:
      # Management interface.
      - "15672:15672"

  # API docs viewer.
  swagger_ui:
    image: docker.swagger.io/swaggerapi/swagger-ui
    environment:
      URLS: |
        [ { url: "/docs/api", "name": "User service" },
          { url: "/exchange/openapi.yml", "name": "Exchange office" }
        ]
      BASE_URL: /docs/ui

  # API gateway.  Routes requests between the mICRoSErViCEs.
  gateway:
    volumes:
      - ./docker/gateway-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./exchange-office/openapi.yaml:/srv/exchange-office-openapi.yml
    image: nginx:1
    ports:
      - 8080:80
    depends_on:
      - user_service
      - exchange_office
      - swagger_ui
    develop:
      watch:
        - action: restart
          path: ./docker/gateway-nginx.conf


volumes:
  user_service_gradle:
  notification_service_gradle:
  # Database storage persistence.
  # notification_service_db_data:
  user_service_db_data:
  exchange_office_data:
